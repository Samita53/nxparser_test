{"name":"Nxparser","tagline":"A collection of Java parsers for different RDF serialisations.","body":"# Welcome to NxParser #\r\n\r\nNxParser is a Java open source, streaming, non-validating parser for the Nx format, where x = Triples, Quads, or any other number. For more details see the specification for the [NQuads format](http://sw.deri.org/2008/07/n-quads/), a extension for the [N-Triples](http://www.w3.org/TR/rdf-testcases/#ntriples) RDF format. Note that the parser handles any combination (cf. [generalised triples](http://www.w3.org/TR/rdf11-concepts/#section-generalized-rdf)) or number of N-Triples syntax terms on each line (the number of terms per line can also vary).\r\n\r\nIt ate 2 mil. quads (~4GB, (~240MB GZIPped)) on a T60p (Win7, 2.16 GHz)  in ~1 min 35 s (1:18min). Overall, it's more than twice as fast as the previous version when it comes to reading Nx.\r\n\r\nThe NxParser is non-validating, meaning that, e.g., it will happily eat non-conformant N-Triples. Also, the NxParser will not parse certain valid N-Triples files where the RDF terms are not separated by whitespace. We pass all positive W3C N-Triples test cases except one, where the RDF terms are not separated by whitespace (surprise!).\r\n\r\n## Other formats ##\r\nThe NxParser Parser family also includes a [RDF/XML](http://www.w3.org/TR/rdf-syntax-grammar/) and a [Turtle](http://www.w3.org/TR/turtle/) parser. Moreover, we attached a [JSON-LD](http://json-ld.org/) parser ([jsonld-java](https://github.com/jsonld-java/jsonld-java)) and a [RDFa](http://www.w3.org/TR/rdfa-core/) parser ([semargl](https://github.com/levkhomich/semargl)) such that they emit Triples in the NxParser API.\r\n\r\n## Other features ##\r\nTo build Jersey / Jax-RS-based Web Apps, you can make use of our provider that automatically (de)serialises RDF for you.\r\n\r\n## Binaries ##\r\nCompiles are available on Maven Central. The groupId is `org.semanticweb.yars` and the artifactId `nxparser`.\r\n### Legacy binaries ###\r\nFind old compiles in the repository on Google Code, which we do not maintain any more. To use it nevertheless, add\r\n```xml\r\n<repository>\r\n <id>nxparser-repo</id>\r\n <url>\r\n  http://nxparser.googlecode.com/svn/repository\r\n </url>\r\n</repository>\r\n<repository>\r\n <id>nxparser-snapshots</id>\r\n <url>\r\n  http://nxparser.googlecode.com/svn/snapshots\r\n </url>\r\n</repository>\r\n```\r\nto your pom.xml.\r\n\r\n## Code Examples ##\r\n### Read Nx from a file ###\r\n```java\r\nFileInputStream is = new FileInputStream(\"path/to/file.nq\");\r\n\r\nNxParser nxp = new NxParser();\r\nnxp.parse(is);\r\n\r\nfor (Node[] nx : nxp)\r\n  // prints the subject, eg. <http://example.org/>\r\n  System.out.println(nx[0]);\r\n```\r\n\r\n### Use a blank node ###\r\n```java\r\n// true means you are supplying proper N-Triples RDF terms that do not need to be processed\r\nResource subjRes = new Resource(\"<http://example.org/123>\", true);\r\nResource predRes = new Resource(\"<http://example.org/123>\", true);\r\nBNode bn = new BNode(\"_:bnodeId\", true);\r\n\r\nNode[] triple = new Node[]{subjRes, predRes, bn};\r\n// yields <http://example.org/123> <http://example.org/123> _:bnodeId\r\nSystem.out.println(Arrays.toString(triple));\r\n```\r\n\r\n### Use Unicode-characters ###\r\n```java\r\nString japaneseString = (\"祝福は、チーズのメーカーです。\");\r\nLiteral japaneseLiteral = new Literal(japaneseString, \"ja\");\r\n\r\n// yields \"\\u795D\\u798F\\u306F\\u3001\\u30C1\\u30FC\\u30BA\\u306E\\u30E1\\u30FC\\u30AB\\u30FC\\u3067\\u3059\\u3002\"@ja\r\nSystem.out.println(japaneseLiteral);\r\n\r\n// yields 祝福は、チーズのメーカーです。\r\nSystem.out.println(japaneseLiteral.getLabel());\r\n```\r\n\r\n### Use datatyped literals ###\r\nExample: Get a Calendar object from an `xsd:dateTime`-typed Literal\r\n```java\r\nLiteral dtl; // parser-generated\r\nXSDDateTime dt = (XSDDateTime)DatatypeFactory.getDatatype(dtl); \r\nGregorianCalendar cal = dt.getValue();\r\n```\r\n\r\n### Use from Python ###\r\nProvided you use the Jython implementation (thanks to Uldis Bojars, this is saved from his now offline blog).\r\n\r\n```python\r\nimport sys\r\nsys.path.append(\"./nxparser.jar\")\r\n\t \r\nfrom org.semanticweb.yars.nx.parser import *\r\nfrom java.io import FileInputStream\r\nfrom java.util.zip import GZIPInputStream\r\n\t \r\ndef all_triples(fname, use_gzip=False):\r\n  in_file = FileInputStream(fname)\r\n  if use_gzip:\r\n      in_file = GZIPInputStream(in_file)\r\n\t \r\n  nxp = NxParser()\r\n  nxp.parse(in_file)\r\n\t \r\n  while nxp.hasNext():\r\n    triple = nxp.next()\r\n    n3 = ([i.toString() for i in triple])\r\n    yield n3\r\n```\r\nThe code above defines a generator function which will yield a stream of NQuad records. We can now add some demo code in order to see it in action:\r\n```python\r\ndef main():\r\n  gzfname = \"sioc-btc-2009.gz\"\r\n \r\n  for line in all_triples(gzfname, use_gzip=True):\r\n    print line\r\n\t \r\n  if __name__ == \"__main__\":\r\n    main()\r\n```\r\nresults in:\r\n```python\r\n[u'<http://2008.blogtalk.net/node/29>', u'<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>', u'<http://rdfs.org/sioc/ns#Post>', u'<http://2008.blogtalk.net/sioc/node/29>']\r\n[u'<http://2008.blogtalk.net/node/65>', u'<http://rdfs.org/sioc/ns#content>', u'\"We\\'ve created a map showing the main places of interest (event locations, restaurants, pubs, shopping locations and tourist sights) during BlogTalk 2008.  The conference venue is shown on the left-hand side of the map.  We will also have a hardcopy for all attendees. View Larger Map\"', u'<http://2008.blogtalk.net/sioc/node/65>']\r\n```\r\n\t\r\n#### issues with Eclipse ####\r\nwe had an issue with eclipse not being able to create his folder structure for nxparser-parsers, ```` mvn eclipse:eclipse ```` did the trick.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}